using System;
using System.Web;
using System.Collections;
using System.Configuration;
using System.Data.OracleClient;
using System.Web.Configuration;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Data;
using System.Web.UI.HtmlControls;
using Tamir.SharpSsh;
using System.Text;
// included to add the XmlInclude attribute
using System.Xml.Serialization;

/// <summary>
/// AutoCheck 的摘要描述
/// </summary>
[WebService(Namespace = "http://autow2ksvr05/BRAT_FT_Prod/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
public class AutoCheck : System.Web.Services.WebService
{
    DBClass dbObj = new DBClass();
    UserInfoClass ucObj = new UserInfoClass();

    Dictionary<string, ArrayList> NonRtBinDict = new Dictionary<string, ArrayList>(); //The Dictionary for collecting NonRetest SoftBin
    int PassQty = 0;   // Pass Quantity 
    int TotalQty = 0;  // Total Quantity
    int BinIdx = 19;   // The index number for searching Bin in array

    public AutoCheck()
    {
        //如果使用設計的元件，請取消註解下行程式碼 
        //InitializeComponent(); 
    }

    /// <summary>
    /// Web service function forchecl BR@T limit and execute auto hold
    /// </summary>
    /// <param name="batch"></param>
    /// <param name="start_date"></param>
    /// <param name="end_date"></param>
    /// <param name="test_stage"></param>
    /// <param name="platform"></param>
    /// <param name="passqty"></param>
    /// <param name="totalqty"></param>
    /// <param name="type"></param>
    /// <param name="rowid"></param>
    /// <returns></returns>
    [WebMethod(CacheDuration = 30, Description = "Summary Collect with Batch and period.")]
    [XmlInclude(typeof(SpecificCheck))]
    public WholeResult GetSummaryInfo(string batch, string start_date, string end_date, string test_stage, string platform, int passqty, int totalqty, int type, string rowid, string qa_id)
    {
        WholeResult SumResult = new WholeResult();
        SpecificCheck BRATcheck = new SpecificCheck();
        StringBuilder HoldCodeList = new StringBuilder();
        BRATcheck.Type = "BR@T";

        string ProductName = "";    //Product Name from Intrack
        string Fab = "";            //Fab Name From Intrack
        string Product12NC = "";    //12NC from Intrack
        string TestStage = "";      //Current TestStage from Intrack
        string SumStage = "";      //Current TestStage from Summary
        string Diffusion = "";      //Diffusion from Intrack
        float RealYield = 0;        //Actual Yield
        float CheckYield = 0;       //The yield of first P code
        int action_result = -1;     //For store action result, defaul is -1
        int tmp_action_result = -1; //template action result
        string DefaultEng = "";     //Defaule engineer from TEN
        int EmptyAction = 0;
        string temperature = "";
        string HoldStatus = "";
        string CkHoldCode = "";

        string connectionString = ConfigurationManager.ConnectionStrings["BRAT_TEST"].ConnectionString;
        System.Data.OracleClient.OracleConnection conn = new System.Data.OracleClient.OracleConnection(connectionString);

        OracleCommand cmd = new OracleCommand("insert into action_log (batch, pass, total, status, platform, tester, commit_date, device, diff, typename, fab, sumrowid, spc_log, holdcode, stage, sum_stage, srt_log, erms_log)" +
                                              "values (:batch_nr,:passqty,:total_qty,:status,'" + platform + "',:tester,to_date(:commit_date,'yyyy-mm-dd HH24:MI:SS'),:device,:diff,:typename,:fab,:sumrowid,:spc_log,:hold_code,:stage,:sum_stage,:str_log,:erms_log)", conn);


        if ((string.IsNullOrEmpty(start_date) == true) || (string.IsNullOrEmpty(end_date) == true))
        {
            //For Auto Hold function , the start_date and end_date generated by system
            end_date = DateTime.Now.ToString("yyyy-MM-dd");
            start_date = DateTime.Now.AddDays(-10).ToString("yyyy-MM-dd");
        }

        //Get necesary data from Intrack, if test stage is incorrect, default use FX
        using (MesData.SFCData service = new MesData.SFCData())
        {
            MesData.CompleteLotDataProxy proxy = service.getCompleteLotData(batch);
            if (proxy != null)
            {
                if (proxy.ErrorNumber == 0)
                {
                    HoldStatus = proxy.Holdstatus;
                    CkHoldCode = proxy.Holdreasoncode;
                    Product12NC = proxy.Product;
                    ProductName = proxy.LocalTypeName;
                    Diffusion = proxy.Waferbatch;
                    Fab = proxy.WaferFabName;
                    TotalQty = System.Convert.ToInt32(proxy.Startedqty) + System.Convert.ToInt32(proxy.Queuedqty);
                    if (type == 0) //To get real-time test stage 
                    {
                        if (char.IsNumber(proxy.Operationname, 1))
                        {
                            TestStage = "F" + proxy.Operationname[1];
                        }
                        else
                        {
                            TestStage = test_stage;
                        }
                    }
                    else
                    {
                        TestStage = test_stage; //For Advantest, the test stage can be parsed easily by filtering the middle character

                        if (platform.CompareTo("UFLEX") == 0)
                        {
                            if ((test_stage.CompareTo("F105") == 0) || (test_stage.CompareTo("B105") == 0))
                            {
                                TestStage = "F1";
                            }
                            else if (test_stage.CompareTo("Q22") == 0)
                            {
                                //TestStage = "F2";
                                TestStage = ucObj.ReturnTenInfo(Product12NC);
                            }
                            else
                            {
                                TestStage = test_stage.Remove(1, 1);
                            }
                        }

                        if (platform.CompareTo("SPEA") == 0)
                        {
                            if (test_stage.IndexOf("_RETEST") != -1)
                            {
                                test_stage = test_stage.Replace("_RETEST", "");
                            }
                            if (test_stage.Length > 2)
                            {
                                TestStage = test_stage.Remove(1, 1);
                            }
                            else
                            {
                                TestStage = "F1";
                            }
                        }

                        if (platform.CompareTo("VISTA") == 0)
                        {
                            if (ProductName.IndexOf("SAA7115") != -1)
                            {
                                if (test_stage.CompareTo("FR1") == 0)
                                {
                                    TestStage = "F1";
                                }
                                if (test_stage.CompareTo("FC1") == 0)
                                {
                                    TestStage = "F2";
                                }
                            }
                            else
                            {
                                TestStage = test_stage.Remove(1, 1);
                            }
                        }

                        // For Turbo, the variable test_stage is used for temperature
                        if (platform.CompareTo("TURBO") == 0)
                        {
                            temperature = test_stage;
                            TestStage = ucObj.RtnTestStage(Product12NC, temperature, platform);
                        }
                    }
                }
            }
            else
            {
                SumResult.ErrorNumber = 10000;
                SumResult.ErrorDescription = "SFC data web service not responsed!";
                SumResult.Result = false;
                return SumResult;
            }
        }
        SumResult.Stage = TestStage;

        // Get defaul Engineer from TEN
        OracleConnection myConn = dbObj.GetTENinfoConnect();
        myConn.Open();
        string queryeng = "select distinct OWNER from type_owner_ft a, nc_list b where a.comm_name=b.comm_name and code_12nc like '" + Product12NC + "%' and stage_name like '" + TestStage + "' ";
        OracleCommand myCmd = new OracleCommand(queryeng, myConn);
        OracleDataReader rd = myCmd.ExecuteReader();
        while (rd.Read())
        {
            DefaultEng = rd["OWNER"].ToString();
        }
        rd.Close();
        myConn.Close();

        SumResult.Engineer = DefaultEng;
        SumResult.Phone = "Unknow";

        /* To prevent the intrack error, user input Pass/Total Qty   */
        TotalQty = totalqty;
        PassQty = passqty;

        RealYield = (float)PassQty / TotalQty * 100;
        SumResult.Yield = RealYield;


        if ((HoldStatus.CompareTo("ON_HOLD") == 0) && (type == 0))
        {
            SumResult.Status = "Hold";
            SumResult.HoldCode = CkHoldCode;
            SumResult.Comment = "此批已hold住，請解hold再重新執行BR@T";
            SumResult.ErrorNumber = 0;
            SumResult.ErrorDescription = "";
            SumResult.Result = true;
            return SumResult;
        }

        //Get necessary data from BR@T limit
        string limit_id = "";      //Expertise ID  from BR@T Limit
        float budget_yield = 0;    //Budget Yield from BR@T Limit
        string device_id = "";     //Device ID from BR@T Limit
        string device_name = "";   //Device Name from BR@T Limit
        string temp = "";
        string os_flag = "";
        int os_check = 0;          //Default O/S check flag
        int index = 0;             //Index for identifying the last summary 
        string last_stage = "";
        string last_temp = "";
        myConn = dbObj.GetLimitConnect();
        myConn.Open();
        string sqlstr = "select DEVICE_POOL2.new_expertise_id, BUDGET_YLD, DEVICE_POOL2.id id, device_pool2.device_name, exp_group2.os_check, device_pool2.temp  " +
                "from DEVICE_POOL2  ,PROD12NC_POOL2, exp_group2  where DEVICE_POOL2.id=PROD12NC_POOL2.id and PROD12NC_POOL2.prod_12nc='" + Product12NC + "' and DEVICE_POOL2.platform = '" + platform + "' " +
                "and DEVICE_POOL2.Stage = '" + TestStage + "' and DEVICE_POOL2.new_expertise_id = exp_group2.new_expertise_id(+)";

        myCmd = new OracleCommand(sqlstr, myConn);
        rd = myCmd.ExecuteReader();
        while (rd.Read())
        {
            limit_id = rd["new_expertise_id"].ToString();
            budget_yield = float.Parse(rd["BUDGET_YLD"].ToString());
            device_id = rd["id"].ToString();
            device_name = rd["device_name"].ToString();
            os_flag = rd["os_check"].ToString();
            temp = rd["temp"].ToString();
        }
        rd.Close();
        myConn.Close();

        if (string.IsNullOrEmpty(os_flag) == true)
        {
            os_check = 1;
        }
        else
        {
            os_check = Int32.Parse(os_flag);
        }
        SumResult.BudgetYield = budget_yield;
        SumResult.Temperature = temp;

        EmptyAction = ucObj.RtnEmptyActionCnt(limit_id);
        if (EmptyAction > 0)
        {
            SumResult.ErrorNumber = 20000;
            SumResult.ErrorDescription = "BR@T Limit is not defined correctly";
            SumResult.Result = false;

            SumResult.StatusIdx = 4;
            SumResult.Status = "通知工程師";
            //SumResult.Engineer = DefaultEng;
            //SumResult.Phone = "Unknow";
            SumResult.Comment = "BR@T Limit 沒有定義好，請通知工程師重新定義";

            //return SumResult;
            if (type == 0)
            {
                cmd.Parameters.Add(new OracleParameter("batch_nr", batch));
                cmd.Parameters.Add(new OracleParameter("passqty", PassQty));
                cmd.Parameters.Add(new OracleParameter("total_qty", TotalQty));
                cmd.Parameters.Add(new OracleParameter("status", SumResult.StatusIdx));
                cmd.Parameters.Add(new OracleParameter("tester", ""));
                cmd.Parameters.Add(new OracleParameter("commit_date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));
                cmd.Parameters.Add(new OracleParameter("device", device_id));
                cmd.Parameters.Add(new OracleParameter("diff", Diffusion));
                cmd.Parameters.Add(new OracleParameter("typename", ProductName));
                cmd.Parameters.Add(new OracleParameter("fab", Fab));
                cmd.Parameters.Add(new OracleParameter("sumrowid", ""));
                cmd.Parameters.Add(new OracleParameter("spc_log", ""));
                cmd.Parameters.Add(new OracleParameter("hold_code", ""));
                cmd.Parameters.Add(new OracleParameter("stage", TestStage));
                cmd.Parameters.Add(new OracleParameter("sum_stage", ""));
                cmd.Parameters.Add(new OracleParameter("str_log", ""));
                cmd.Parameters.Add(new OracleParameter("erms_log", ""));


                int rowsAffected2 = 0;

                conn.Open();
                try
                {
                    rowsAffected2 = cmd.ExecuteNonQuery();
                }
                finally
                {
                    conn.Close();
                }
            }
            return SumResult;

        }

        //Base on the type(auto check/manual check) get last record
        DataSet ds = new DataSet();
        if (type == 0)
        {
            switch (platform)
            {
                case "AGILENT":
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, "", platform, 1);
                    index = ds.Tables["SumInfo"].Select("rowid is not null").Length - 1; // To get the latest record
                    break;

                case "A5XX":
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, TestStage, platform, 3);
                    index = ds.Tables["SumInfo"].Select("rowid is not null").Length - 1; // To get the latest record
                    break;

                case "UFLEX":
                    last_stage = ucObj.RtnLastStage(batch, start_date, end_date, platform);
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, last_stage, platform, 4);
                    index = ds.Tables["SumInfo"].Select("rowid is not null").Length - 1; // To get the latest record
                    break;

                case "SPEA":
                    last_stage = ucObj.RtnLastStage(batch, start_date, end_date, platform);
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, last_stage, platform, 4);
                    index = ds.Tables["SumInfo"].Select("rowid is not null").Length - 1; // To get the latest record
                    break;

                case "VISTA":
                    last_stage = ucObj.RtnLastStage(batch, start_date, end_date, platform);
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, last_stage, platform, 4);
                    index = ds.Tables["SumInfo"].Select("rowid is not null").Length - 1; // To get the latest record
                    break;

                case "TURBO":
                    last_temp = ucObj.RtnLastTemp(batch, start_date, end_date, platform);
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, last_temp, platform, 7);
                    index = ds.Tables["SumInfo"].Select("rowid is not null").Length - 1; // To get the latest record
                    break;
            }
        }
        else
        {
            int j = 0;
            switch (platform)
            {
                case "AGILENT":
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, TestStage, platform, 2);
                    j = 0;
                    foreach (DataRow row2 in ds.Tables["SumInfo"].Rows)
                    {
                        if (row2[276].ToString().CompareTo(rowid) == 0)
                        {
                            index = j;
                        }
                        j++;
                    }
                    break;

                case "A5XX":
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, TestStage, platform, 3);
                    j = 0;
                    foreach (DataRow row2 in ds.Tables["SumInfo"].Rows)
                    {
                        if (row2[276].ToString().CompareTo(rowid) == 0)
                        {
                            index = j;
                        }
                        j++;
                    }
                    break;

                case "UFLEX":
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, test_stage, platform, 5);
                    j = 0;
                    foreach (DataRow row2 in ds.Tables["SumInfo"].Rows)
                    {
                        if (row2[276].ToString().CompareTo(rowid) == 0)
                        {
                            index = j;
                        }
                        j++;
                    }
                    break;

                case "SPEA":
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, test_stage, platform, 6);
                    j = 0;
                    foreach (DataRow row2 in ds.Tables["SumInfo"].Rows)
                    {
                        if (row2[276].ToString().CompareTo(rowid) == 0)
                        {
                            index = j;
                        }
                        j++;
                    }
                    break;

                case "VISTA":
                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, test_stage, platform, 4);
                    j = 0;
                    foreach (DataRow row2 in ds.Tables["SumInfo"].Rows)
                    {
                        if (row2[276].ToString().CompareTo(rowid) == 0)
                        {
                            index = j;
                        }
                        j++;
                    }
                    break;

                case "TURBO":

                    ds = ucObj.RtnAllSumInfo("SumInfo", batch, start_date, end_date, temperature, platform, 7);
                    j = 0;
                    foreach (DataRow row2 in ds.Tables["SumInfo"].Rows)
                    {
                        if (row2[276].ToString().CompareTo(rowid) == 0)
                        {
                            index = j;
                        }
                        j++;
                    }
                    break;

            }
        }

        if (index == -1)
        {
            SumResult.ErrorNumber = 11000;
            SumResult.ErrorDescription = "本批未測完或是summary還沒上傳!";
            SumResult.Result = false;
            return SumResult;
        }
        float OSYield = 0; //  Initail Open/Short Yield

        string last_rowid = ds.Tables["SumInfo"].Rows[index][276].ToString();          //Get the row_id of latest record
        string tester = ds.Tables["SumInfo"].Rows[index][285].ToString();              //Get the row_id of latest record
        string non_retest_bin = ds.Tables["SumInfo"].Rows[index][287].ToString();      //Get the non_retest bin list
        int bin12 = 0;
        if (ds.Tables["SumInfo"].Rows[index][31].ToString().CompareTo("") != 0)
            bin12 = Convert.ToInt32(ds.Tables["SumInfo"].Rows[index][31].ToString());  //Get the bin12 of last record
        int bin11 = 0;
        if (ds.Tables["SumInfo"].Rows[index][30].ToString().CompareTo("") != 0)
            bin11 = Convert.ToInt32(ds.Tables["SumInfo"].Rows[index][30].ToString());  //Get the bin11 of last record
        int merge_bin11 = 0;
        string commit_date = ds.Tables["SumInfo"].Rows[index][281].ToString();
        SumStage = ds.Tables["SumInfo"].Rows[index][286].ToString();

        //Non-retest bin default value is retest all at Agilent
        if ((non_retest_bin.CompareTo("") == 0) && platform.CompareTo("AGILENT") == 0)
        {
            non_retest_bin = "R:all";
        }
        //Non-retest bin default value is non retest bin 11 at A5XX
        if ((non_retest_bin.CompareTo("") == 0) && ((platform.CompareTo("A5XX") == 0) || (platform.CompareTo("UFLEX") == 0) || (platform.CompareTo("VISTA") == 0) || (platform.CompareTo("TURBO") == 0)))
        {
            non_retest_bin = "11";
        }

        if ((platform.CompareTo("A5XX") == 0) || (platform.CompareTo("UFLEX") == 0) || (platform.CompareTo("VISTA") == 0) || (platform.CompareTo("TURBO") == 0))
        {
            NonRtBinDict = NonRetestHBinCollect(ds, last_rowid, non_retest_bin);
        }
        if (platform.CompareTo("AGILENT") == 0)
        {
            NonRtBinDict = NonRetestBinCollect(ds, last_rowid, non_retest_bin);
        }

        //If the actual yield >= 100, check yield of the 1st P ocde test 
        if (RealYield >= 100)
        {
            if (RealYield > 100)
            {
                SpecificCheck AYHcheck = new SpecificCheck();
                AYHcheck.Type = "AYHcheck";
                AYHcheck.HoldCode = "AYH";
                AYHcheck.Comment = "良率100%，請注意!";
                SumResult.SpecificResult.Add(AYHcheck);
                HoldCodeList.Append("AYT;");

                SumResult.StatusIdx = 0;
                SumResult.Status = "Hold (100% Yield)";
                //SumResult.Engineer = DefaultEng;
                //SumResult.Phone = "Unknow";
                SumResult.HoldCode = "AYH";
                SumResult.Comment = "良率100%，請注意!";
            }
            else
            {
                if ((NonRtBinDict.ContainsKey("Pass")) && (NonRtBinDict.ContainsKey("Total")))
                {
                    CheckYield = (float)Convert.ToInt32(NonRtBinDict["Pass"][0].ToString()) / Convert.ToInt32(NonRtBinDict["Total"][0].ToString()) * 100;
                }

                if (CheckYield >= 100)
                {

                    SpecificCheck AYHcheck = new SpecificCheck();
                    AYHcheck.Type = "AYHcheck";
                    AYHcheck.HoldCode = "AYH";
                    AYHcheck.Comment = "良率100%，請注意!";
                    SumResult.SpecificResult.Add(AYHcheck);
                    HoldCodeList.Append("AYT;");

                    SumResult.StatusIdx = 0;
                    SumResult.Status = "Hold (100% Yield)";
                    //SumResult.Engineer = DefaultEng;
                    //SumResult.Phone = "Unknow";
                    SumResult.HoldCode = "AYH";
                    SumResult.Comment = "良率100%，請注意!";
                }
            }
        }

        //Check the Open/Short yield
        if (NonRtBinDict.ContainsKey("bin11"))
        {
            if (platform.CompareTo("AGILENT") == 0)
            {
                merge_bin11 = bin11 + Convert.ToInt32(NonRtBinDict["bin11"][0].ToString());
                ds.Tables["SumInfo"].Rows[index][BinIdx + 11] = merge_bin11.ToString();  //Update the bin 11 value of last record
            }

            OSYield = (float)(bin11 + Convert.ToInt32(NonRtBinDict["bin11"][0].ToString()) + bin12) / TotalQty * 100;
        }
        else
        {
            OSYield = (float)(bin11 + bin12) / TotalQty * 100;
        }

        if (os_check == 1)
        {
            if (OSYield > 1)
            {
                SpecificCheck OScheck = new SpecificCheck();
                OScheck.Type = "OScheck";
                OScheck.HoldCode = "AYA";
                OScheck.Comment = "Open/Short(" + String.Format("{0:#,0.#####}", OSYield) + ") 大於 1%，請注意! ";
                SumResult.SpecificResult.Add(OScheck);
                HoldCodeList.Append("AYA;");

                SumResult.StatusIdx = 0;
                SumResult.Status = "Hold (Open/Short)";
                //SumResult.Engineer = DefaultEng;
                //SumResult.Phone = "Unknow";
                SumResult.HoldCode = "AYA";
                SumResult.Comment = "Open/Short(" + String.Format("{0:#,0.#####}", OSYield) + ") 大於 1%，請注意! ";

            }
        }
        else
        {
            OSYield = 0;
        }

        if ((platform.CompareTo("A5XX") == 0) || (platform.CompareTo("UFLEX") == 0) || (platform.CompareTo("VISTA") == 0) || (platform.CompareTo("TURBO") == 0))
        {
            for (int i = 1; i <= 255; i++)
            {
                if (ds.Tables["SumInfo"].Rows[index][BinIdx + i].ToString().CompareTo("") != 0)
                {
                    string ttt = ds.Tables["SumInfo"].Rows[index][BinIdx + i].ToString();
                    int qty = Convert.ToInt32(ds.Tables["SumInfo"].Rows[index][BinIdx + i].ToString());
                    if (!NonRtBinDict.ContainsKey(Convert.ToString(i)))
                    {
                        NonRtBinDict.Add(Convert.ToString(i), new ArrayList());
                        NonRtBinDict[Convert.ToString(i)].Add(qty);
                    }
                    else
                    {
                        NonRtBinDict[Convert.ToString(i)][0] = Convert.ToInt32(NonRtBinDict[Convert.ToString(i)][0]) + Convert.ToInt32(qty);
                    }
                }
            }
        }

        if (platform.CompareTo("AGILENT") == 0)
        {
            for (int i = 0; i <= 19; i++)
            {
                if (ds.Tables["SumInfo"].Rows[index][i].ToString().CompareTo("") != 0)
                {
                    string keynum = ds.Tables["SumInfo"].Rows[index][i].ToString().Split(';')[0];
                    string keyqty = ds.Tables["SumInfo"].Rows[index][i].ToString().Split(';')[1];
                    string keydesc = ds.Tables["SumInfo"].Rows[index][i].ToString().Split(';')[2];
                    if (!NonRtBinDict.ContainsKey(keynum))
                    {
                        NonRtBinDict.Add(keynum, new ArrayList());
                        NonRtBinDict[keynum].Add(keyqty);
                        NonRtBinDict[keynum].Add(keydesc);
                    }
                    else
                    {
                        NonRtBinDict[keynum][0] = Convert.ToInt32(NonRtBinDict[keynum][0]) + Convert.ToInt32(keyqty);
                    }
                }
            }
        }


        ds.Tables["SumInfo"].Rows[index][BinIdx + 1] = PassQty;

        if ((OSYield > 1) || (CheckYield >= 100))
        {
            goto OtherCheck;
        }

        string P_Str_SqlStr = "SELECT CRITERION, PIORITY, EQUATION, UNIT, QTY, CRITERION2, EQUATION2, UNIT2, QTY2,INDICATE_ID, ACTION, HOLD_CODE, COMMENTS, ENGINEER, PHONE FROM  LIMIT_EXPERTISE WHERE NEW_EXPERTISE_ID = '" + limit_id + "'  order by PIORITY";
        OracleDataAdapter da = new OracleDataAdapter(P_Str_SqlStr, myConn);
        DataSet ds_limit = new DataSet();
        da.Fill(ds_limit, "LIMIT");
        DataTable newtable = new DataTable();
        newtable = ds_limit.Tables["LIMIT"];

        foreach (DataRow row in newtable.Rows)
        {
            if (platform.CompareTo("AGILENT") == 0)
            {
                tmp_action_result = LimitParse(row, ds.Tables["SumInfo"].Rows[index]);
            }

            if ((platform.CompareTo("A5XX") == 0) || (platform.CompareTo("UFLEX") == 0) || (platform.CompareTo("VISTA") == 0) || (platform.CompareTo("TURBO") == 0))
            {
                tmp_action_result = LimitParse2(row, ds.Tables["SumInfo"].Rows[index]);
            }

            if (platform.CompareTo("SPEA") == 0)
            {
                tmp_action_result = LimitParse3(row, ds.Tables["SumInfo"].Rows[index]);
            }

            if ((action_result == -1) && (tmp_action_result != -1))
            {
                action_result = tmp_action_result;

                //SumResult.Engineer = Server.UrlDecode(row[13].ToString());
                //SumResult.Engineer = DefaultEng;
                //SumResult.Phone = row[14].ToString();

                BRATcheck.HoldCode = row[11].ToString();
                BRATcheck.Comment = Server.UrlDecode(row[12].ToString());
                if (tmp_action_result == 0)
                {
                    HoldCodeList.Append(row[11].ToString() + ";");
                }
            }
            else
            {
                if ((tmp_action_result < action_result) && (tmp_action_result != -1))
                {
                    action_result = tmp_action_result;

                    //SumResult.Engineer = Server.UrlDecode(row[13].ToString());
                    //SumResult.Engineer = DefaultEng;
                    //SumResult.Phone = row[14].ToString();

                    BRATcheck.HoldCode = row[11].ToString();
                    BRATcheck.Comment = Server.UrlDecode(row[12].ToString());
                    if (tmp_action_result == 0)
                    {
                        HoldCodeList.Append(row[11].ToString() + ";");
                    }

                }
            }
        }

        if (action_result == -1)
        {
            if (RealYield >= (budget_yield - 2))
            {
                BRATcheck.Comment = "Check Budget Yield Pass";
                BRATcheck.HoldCode = "";
                SumResult.Status = ucObj.IndicationRtn("1");
                SumResult.StatusIdx = 1;
            }
            else
            {
                BRATcheck.Comment = "Check Budget Yield Fail";
                BRATcheck.HoldCode = "AYT";
                SumResult.Status = ucObj.IndicationRtn("0");
                SumResult.StatusIdx = 0;
                HoldCodeList.Append("AYT;");
            }
        }
        else
        {
            SumResult.Status = ucObj.IndicationRtn(action_result.ToString());
            SumResult.StatusIdx = action_result;
        }
        SumResult.HoldCode = BRATcheck.HoldCode;
        SumResult.Comment = BRATcheck.Comment;

        SumResult.SpecificResult.Add(BRATcheck);

    OtherCheck:

        //QA-Sampling check
        if (string.IsNullOrEmpty(qa_id) == true)
        {
            SpecificCheck QAcheck = new SpecificCheck();
            QAcheck.Type = "QASampling";
            QAcheck.HoldCode = "None";
            QAcheck.Comment = "QA is not checked";
            SumResult.SpecificResult.Add(QAcheck);

        }
        else
        {
            using (autow2ksvr03.QASamplingWebServices service2 = new autow2ksvr03.QASamplingWebServices())
            {
                autow2ksvr03.getQAResults proxy2 = new autow2ksvr03.getQAResults();
                switch (platform)
                {
                    case "AGILENT":
                        proxy2 = service2.getQAResult(qa_id, batch, TestStage, tester, "");
                        break;

                    case "A5XX":
                        proxy2 = service2.getQAResult(qa_id, batch, TestStage, tester, "");
                        break;

                    case "UFLEX":
                        proxy2 = service2.getQAResult(qa_id, batch, TestStage, "", tester);
                        break;

                    case "SPEA":
                        proxy2 = service2.getQAResult(qa_id, batch, TestStage, tester, "");
                        break;

                    case "VISTA":
                        proxy2 = service2.getQAResult(qa_id, batch, TestStage, "", tester);
                        break;

                    case "TURBO":

                        break;
                }
                if (proxy2 != null)
                {
                    if (proxy2.QAData.QAFlag.CompareTo("-1") == 0)
                    {

                        //System Error "-1", hold code AEC
                        //current checking is disabled
                        /*
                        if (proxy2.QAData.QAFlag.CompareTo("-1") == 0)
                        {
                            proxy2.QAData.
                            SpecificCheck QAcheck = new SpecificCheck();
                            QAcheck.Type = "QASampling";
                            QAcheck.HoldCode = "AER";
                            QAcheck.Comment = "System Error";
                            SumResult.SpecificResult.Add(QAcheck);
                            HoldCodeList.Append("AER;");
                            if (SumResult.StatusIdx != 0)
                            {
                                SumResult.Status = "Hold (QA Sampling)";
                                SumResult.StatusIdx = 0;
                                //SumResult.Engineer = DefaultEng;
                                //SumResult.Phone = "Unknow";
                                SumResult.HoldCode = "AER";
                                SumResult.Comment = "System Error";
                            }
                        }*/

                    }
                    else
                    {
                        if (proxy2.QAData.QAFlag.CompareTo("1") == 0)
                        {
                            if (proxy2.QAData.QADone.CompareTo("1") == 0)
                            {
                                string QA_result = ucObj.RtnQAResult2(batch, start_date, end_date, platform, proxy2.QAData.QASize, tester, TestStage, type);
                                if (QA_result.CompareTo("None") != 0)
                                {
                                    SpecificCheck QAcheck = new SpecificCheck();
                                    QAcheck.Type = "QASampling";
                                    QAcheck.HoldCode = QA_result;
                                    QAcheck.Comment = "QA Sampling Fail";
                                    SumResult.SpecificResult.Add(QAcheck);
                                    HoldCodeList.Append(QA_result + ";");

                                    if (SumResult.StatusIdx != 0)
                                    {
                                        SumResult.Status = "Hold (QA Sampling)";
                                        SumResult.StatusIdx = 0;
                                        //SumResult.Engineer = DefaultEng;
                                        //SumResult.Phone = "Unknow";
                                        SumResult.HoldCode = QA_result;
                                        SumResult.Comment = "QA Sampling Fail";
                                    }
                                    service2.storeQAResult(qa_id, false);
                                }
                                else
                                {
                                    service2.storeQAResult(qa_id, true);
                                }
                            }
                            else
                            {
                                //QA is not executed, hold code AQS
                                SpecificCheck QAcheck = new SpecificCheck();
                                QAcheck.Type = "QASampling";
                                QAcheck.HoldCode = "AQS";
                                QAcheck.Comment = "QA is not executed";
                                SumResult.SpecificResult.Add(QAcheck);
                                HoldCodeList.Append("AQS;");
                                if (SumResult.StatusIdx != 0)
                                {
                                    SumResult.Status = "Hold (QA Sampling)";
                                    SumResult.StatusIdx = 0;
                                    //SumResult.Engineer = DefaultEng;
                                    //SumResult.Phone = "Unknow";
                                    SumResult.HoldCode = "AQS";
                                    SumResult.Comment = "QA is not executed";
                                }
                                service2.storeQAResult(qa_id, false);
                            }

                        }
                        else
                        {
                            //To check special QA
                            if (ucObj.CheckSpecialQA2(Product12NC, TestStage) == 1)
                            {
                                string QA_result = ucObj.RtnQAResult2(batch, start_date, end_date, platform, ucObj.ReturnQAsize(TotalQty), tester, TestStage, type);
                                if (QA_result.CompareTo("None") != 0)
                                {
                                    SpecificCheck QAcheck = new SpecificCheck();
                                    QAcheck.Type = "QASampling";
                                    QAcheck.HoldCode = QA_result;
                                    QAcheck.Comment = "QA Sampling Fail";
                                    SumResult.SpecificResult.Add(QAcheck);
                                    HoldCodeList.Append(QA_result + ";");

                                    if (SumResult.StatusIdx != 0)
                                    {
                                        SumResult.Status = "Hold (QA Sampling)";
                                        SumResult.StatusIdx = 0;
                                        //SumResult.Engineer = DefaultEng;
                                        //SumResult.Phone = "Unknow";
                                        SumResult.HoldCode = QA_result;
                                        SumResult.Comment = "QA Sampling Fail";
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }

        //Bin SPC Check
        string ParaBinSPC = "";
        ParaBinSPC = batch + ":" + TestStage + ":" + platform + ":" + TotalQty;

        for (int i = 1; i <= 256; i++)
        {
            if (Regex.IsMatch(ds.Tables["SumInfo"].Rows[index][BinIdx + i].ToString().Trim(), @"^\d+$"))
            {
                ParaBinSPC = ParaBinSPC + ":" + i + "," + ds.Tables["SumInfo"].Rows[index][BinIdx + i].ToString().Trim();
            }
        }

        string exec_result = RunSpcCheck(ParaBinSPC).Replace("\r", "").Replace("\n", "");
        if (string.IsNullOrEmpty(exec_result) == false)
        {

            SpecificCheck SPCcheck = new SpecificCheck();
            SPCcheck.Type = "BIN_SPC";
            SPCcheck.HoldCode = "AQM";
            SPCcheck.Comment = exec_result;
            SumResult.SpecificResult.Add(SPCcheck);
            HoldCodeList.Append("AQM;");


            if (((device_name.CompareTo("SAF7741") == 0) && (platform.CompareTo("AGILENT") == 0)) || ((device_name.CompareTo("TEF6721") == 0) && (platform.CompareTo("A5XX") == 0)) || ((device_name.CompareTo("TDA18273") == 0) && (platform.CompareTo("UFLEX") == 0)) || ((device_name.CompareTo("TDF8599") == 0) && (platform.CompareTo("SPEA") == 0)))
            {
                if (SumResult.StatusIdx != 0)
                {
                    SumResult.Status = "Hold (BIN_SPC)";
                    SumResult.StatusIdx = 0;
                    //SumResult.Engineer = DefaultEng;
                    //SumResult.Phone = "Unknow";
                    SumResult.HoldCode = "AQM";
                    SumResult.Comment = exec_result;
                }
            }
            else
            {
                if (SumResult.StatusIdx != 0)
                {
                    SumResult.StatusIdx = 1;
                    SumResult.Status = ucObj.IndicationRtn("1");
                }
            }
        }

        //R2R Check
        string exec_result2 = RunR2RCheck(batch, TestStage, commit_date);
        string[] R2RInfo = exec_result2.Split(';');
        if (R2RInfo[0][0] == '1')
        {

            SpecificCheck R2Rcheck = new SpecificCheck();
            R2Rcheck.Type = "R2R";

            R2Rcheck.Comment = exec_result2;

            if (R2RInfo.Length == 2)
            {
                string[] testary = R2RInfo[1].Split('|');
                Array.Reverse(testary);
                R2Rcheck.HoldCode = testary[0];
            }

            if (R2RInfo.Length == 3)
            {
                string[] testary = R2RInfo[2].Split('|');
                Array.Reverse(testary);
                R2Rcheck.HoldCode = R2Rcheck.HoldCode + ";" + testary[0];
            }
            HoldCodeList.Append(R2Rcheck.HoldCode);
            SumResult.SpecificResult.Add(R2Rcheck);

            if (SumResult.StatusIdx != 0)
            {
                SumResult.StatusIdx = 0;
                SumResult.Status = "Hold (R2R)";
                SumResult.Engineer = "J.R.Wang";
                SumResult.Phone = "18287";
                SumResult.HoldCode = R2Rcheck.HoldCode;
                SumResult.Comment = "HOLD (APK code), call 18287, JR Wang";

            }
        }
        goto Finish;

    Finish:

        string all_hold_code = "";

        if (HoldCodeList.Length > 0)
        {
            all_hold_code = RemoveDuplicates(HoldCodeList);
        }

        SumResult.HoldCode = all_hold_code;


        /*
        for (int count = 0; count < SumResult.SpecificResult.Count; count++)
        {
            SpecificCheck reporter = (SpecificCheck)SumResult.SpecificResult[count];
        }
        */

        if ((type == 0) || (type == 2))
        {
            int hold_cnt = ucObj.CheckHoldStatus(batch, TestStage);

            if ((hold_cnt == 0) && (SumResult.StatusIdx == 0))
            {
                //AutoHold(batch, all_hold_code, "BRC Hold");
                string contact = "david.tsai@nxp.com";
                string mail_body = "";
                mail_body += "<p>Dear " + SumResult.Engineer + " </p><br/>";
                mail_body += "<p>You are receiving this email notification because of hold issue occurred.</p>";
                mail_body += "<p>Batch : " + batch + "</p>";
                mail_body += "<p>Hold Code : " + all_hold_code + "</p>";
                //EmailAgent.sendHtmlEmailOut("BRC mail agent", contact, "BR@T Hold", mail_body);
            }

            string LogCheck = ucObj.FindActionLog(batch, TestStage);

            if ((LogCheck.CompareTo("NoLog") == 0) || (LogCheck.CompareTo(SumResult.StatusIdx.ToString()) != 0))
            {
                cmd.Parameters.Add(new OracleParameter("batch_nr", batch));
                cmd.Parameters.Add(new OracleParameter("passqty", PassQty));
                cmd.Parameters.Add(new OracleParameter("total_qty", TotalQty));
                cmd.Parameters.Add(new OracleParameter("status", SumResult.StatusIdx));
                cmd.Parameters.Add(new OracleParameter("tester", tester));
                cmd.Parameters.Add(new OracleParameter("commit_date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));
                cmd.Parameters.Add(new OracleParameter("device", device_id));
                cmd.Parameters.Add(new OracleParameter("diff", Diffusion));
                cmd.Parameters.Add(new OracleParameter("typename", ProductName));
                cmd.Parameters.Add(new OracleParameter("fab", Fab));
                cmd.Parameters.Add(new OracleParameter("sumrowid", last_rowid));
                cmd.Parameters.Add(new OracleParameter("spc_log", exec_result));
                cmd.Parameters.Add(new OracleParameter("hold_code", all_hold_code));
                cmd.Parameters.Add(new OracleParameter("stage", TestStage));
                cmd.Parameters.Add(new OracleParameter("sum_stage", SumStage));
                cmd.Parameters.Add(new OracleParameter("str_log", ""));
                cmd.Parameters.Add(new OracleParameter("erms_log", exec_result2));

                int rowsAffected2 = 0;

                conn.Open();
                try
                {
                    rowsAffected2 = cmd.ExecuteNonQuery();
                }
                finally
                {
                    conn.Close();
                }
            }
        }


        SumResult.ErrorNumber = 0;
        SumResult.ErrorDescription = "";
        SumResult.Result = true;
        return SumResult;
    }

    /// <summary>
    /// To collect non-retest soft bin except the last record and also check the yield of first record with test code "P"
    /// </summary>
    /// <param name="ds">the dataset for storing the record of the batch</param>
    /// <param name="rowid">The rowid of last record</param>
    /// <param name="NRT_bin">Non-retest Bin list</param>
    /// <returns></returns>
    private Dictionary<string, ArrayList> NonRetestBinCollect(DataSet ds, string rowid, string NRT_bin)
    {
        int RetestIndex = 0;
        int NR_reset = 0;
        int bin11 = 0;
        int PassCheck = 0;
        int TotalCheck = 0;
        int FirstYieldCheck = 0;
        Hashtable NonRtBinHash = new Hashtable();
        Dictionary<string, ArrayList> NonRtBinDict = new Dictionary<string, ArrayList>();

        foreach (DataRow row in ds.Tables["SumInfo"].Rows)
        {

            //To get the actual yield to prevent first 100% yield
            if ((row[284].ToString().CompareTo("P") == 0) && FirstYieldCheck == 0)
            {
                PassCheck = Convert.ToInt32(row[282].ToString());
                TotalCheck = Convert.ToInt32(row[283].ToString());

                if (!NonRtBinDict.ContainsKey("Pass"))
                {
                    NonRtBinDict.Add("Pass", new ArrayList());
                    NonRtBinDict["Pass"].Add(PassCheck);

                }
                else
                {
                    NonRtBinDict["Pass"][0] = Convert.ToInt32(NonRtBinDict["Pass"][0]) + PassCheck;
                }

                if (!NonRtBinDict.ContainsKey("Total"))
                {
                    NonRtBinDict.Add("Total", new ArrayList());
                    NonRtBinDict["Total"].Add(TotalCheck);

                }
                else
                {
                    NonRtBinDict["Total"][0] = Convert.ToInt32(NonRtBinDict["Total"][0]) + TotalCheck;
                }
                FirstYieldCheck = 1;
            }

            //Don't callculate the last record
            if (row[276].ToString().CompareTo(rowid) == 0)
            {
                break;
            }

            //Collecting Bin11 information
            if (row[30].ToString().CompareTo("") != 0)
            {
                bin11 = Convert.ToInt32(row[30].ToString());

                if (!NonRtBinDict.ContainsKey("bin11"))
                {
                    NonRtBinDict.Add("bin11", new ArrayList());
                    NonRtBinDict["bin11"].Add(bin11);
                    NonRtBinDict["bin11"].Add("");

                }
                else
                {
                    NonRtBinDict["bin11"][0] = Convert.ToInt32(NonRtBinDict["bin11"][0]) + bin11;
                }
            }

            if (NRT_bin[0] == 'R')
            {
                RetestIndex = 1;
            }
            if (NRT_bin.CompareTo("") != 0)
            {
                if (NR_reset == 0)
                {
                    NRtBinParse(NRT_bin, NonRtBinHash);
                    NR_reset = 1;
                }
                for (int i = 0; i <= 19; i++)
                {
                    if (row[i].ToString().CompareTo("") != 0)
                    {
                        string[] binarray = row[i].ToString().Split(';');

                        if (RetestIndex == 1)
                        {
                            if (NRT_bin.IndexOf("all") == -1)
                            {
                                if (!NonRtBinHash.ContainsKey(binarray[0]))
                                {
                                    if (!NonRtBinDict.ContainsKey(binarray[0]))
                                    {
                                        NonRtBinDict.Add(binarray[0], new ArrayList());
                                        NonRtBinDict[binarray[0]].Add(binarray[1]);
                                        NonRtBinDict[binarray[0]].Add(binarray[2]);
                                    }
                                    else
                                    {
                                        NonRtBinDict[binarray[0]][0] = Convert.ToInt32(NonRtBinDict[binarray[0]][0]) + Convert.ToInt32(binarray[1]);
                                    }
                                }
                            }
                            else
                            {
                                return NonRtBinDict;
                            }
                        }
                        else
                        {
                            if (NRT_bin.IndexOf("all") != -1)
                            {

                                if (!NonRtBinDict.ContainsKey(binarray[0]))
                                {
                                    NonRtBinDict.Add(binarray[0], new ArrayList());
                                    NonRtBinDict[binarray[0]].Add(binarray[1]);
                                    NonRtBinDict[binarray[0]].Add(binarray[2]);
                                }
                                else
                                {
                                    NonRtBinDict[binarray[0]][0] = Convert.ToInt32(NonRtBinDict[binarray[0]][0]) + Convert.ToInt32(binarray[1]);
                                }
                            }
                            else
                            {
                                if (NonRtBinHash.ContainsKey(binarray[0]))
                                {
                                    if (!NonRtBinDict.ContainsKey(binarray[0]))
                                    {
                                        NonRtBinDict.Add(binarray[0], new ArrayList());
                                        NonRtBinDict[binarray[0]].Add(binarray[1]);
                                        NonRtBinDict[binarray[0]].Add(binarray[2]);

                                    }
                                    else
                                    {
                                        NonRtBinDict[binarray[0]][0] = Convert.ToInt32(NonRtBinDict[binarray[0]][0]) + Convert.ToInt32(binarray[1]);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return NonRtBinDict;
    }

    /// <summary>
    /// To collect non-retest hard bin except the last record and also check the yield of first record with test code "P"
    /// </summary>
    /// <param name="ds">the dataset for storing the record of the batch</param>
    /// <param name="rowid">The rowid of last record</param>
    /// <param name="NRT_bin">Non-retest Bin list</param>
    /// <returns></returns>
    private Dictionary<string, ArrayList> NonRetestHBinCollect(DataSet ds, string rowid, string NRT_bin)
    {
        int NR_reset = 0;
        int bin11 = 0;
        int PassCheck = 0;
        int TotalCheck = 0;
        int FirstYieldCheck = 0;
        Hashtable NonRtBinHash = new Hashtable();
        Dictionary<string, ArrayList> NonRtBinDict = new Dictionary<string, ArrayList>();

        foreach (DataRow row in ds.Tables["SumInfo"].Rows)
        {

            //To get the actual yield to prevent first 100% yield
            if ((row[284].ToString().CompareTo("P") == 0) && FirstYieldCheck == 0)
            {
                PassCheck = Convert.ToInt32(row[282].ToString());
                TotalCheck = Convert.ToInt32(row[283].ToString());

                if (!NonRtBinDict.ContainsKey("Pass"))
                {
                    NonRtBinDict.Add("Pass", new ArrayList());
                    NonRtBinDict["Pass"].Add(PassCheck);

                }
                else
                {
                    NonRtBinDict["Pass"][0] = Convert.ToInt32(NonRtBinDict["Pass"][0]) + PassCheck;
                }

                if (!NonRtBinDict.ContainsKey("Total"))
                {
                    NonRtBinDict.Add("Total", new ArrayList());
                    NonRtBinDict["Total"].Add(TotalCheck);

                }
                else
                {
                    NonRtBinDict["Total"][0] = Convert.ToInt32(NonRtBinDict["Total"][0]) + TotalCheck;
                }
                FirstYieldCheck = 1;
            }

            //Don't callculate the last record
            if (row[276].ToString().CompareTo(rowid) == 0)
            {
                break;
            }

            //Collecting Bin11 information
            if (row[30].ToString().CompareTo("") != 0)
            {
                bin11 = Convert.ToInt32(row[30].ToString());

                if (!NonRtBinDict.ContainsKey("bin11"))
                {
                    NonRtBinDict.Add("bin11", new ArrayList());
                    NonRtBinDict["bin11"].Add(bin11);
                    NonRtBinDict["bin11"].Add("");

                }
                else
                {
                    NonRtBinDict["bin11"][0] = Convert.ToInt32(NonRtBinDict["bin11"][0]) + bin11;
                }
            }

            if (NRT_bin.CompareTo("") != 0)
            {
                if (NR_reset == 0)
                {
                    NRtBinParse(NRT_bin, NonRtBinHash);
                    NR_reset = 1;
                }

                for (int i = 1; i <= 255; i++)
                {
                    if (row[i + BinIdx].ToString().CompareTo("") != 0)
                    {
                        if (NonRtBinHash.ContainsKey(i))
                        {
                            if (!NonRtBinDict.ContainsKey(Convert.ToString(i)))
                            {
                                NonRtBinDict.Add(Convert.ToString(i), new ArrayList());
                                NonRtBinDict[Convert.ToString(i)].Add(row[i + BinIdx].ToString());
                            }
                            else
                            {
                                NonRtBinDict[Convert.ToString(i)][0] = Convert.ToInt32(NonRtBinDict[Convert.ToString(i)][0]) + Convert.ToInt32(row[i + BinIdx].ToString());
                            }
                        }
                    }
                }

                //To prevent Bin 11 is not defined as non-retest bin
                if ((NonRtBinDict.ContainsKey("bin11")) && (!NonRtBinDict.ContainsKey("11")))
                {
                    NonRtBinDict.Add("11", new ArrayList());
                    NonRtBinDict["11"].Add(NonRtBinDict["bin11"][0]);
                }
            }
        }
        return NonRtBinDict;
    }

    /// <summary>
    /// To Create a hash table for storing all non-retest bin
    /// </summary>
    /// <param name="NRtBinList">Non-Retest bin list</param>
    /// <param name="NonRtBin">The initial hash table of non-retest bin information </param>
    public void NRtBinParse(string NRtBinList, Hashtable NonRtBin)
    {
        if (NRtBinList[0] == 'R')
        {
            NRtBinList = NRtBinList.Replace("R:", "");
        }
        string zero_factor = "";
        string[] conArray = NRtBinList.Split(',');
        foreach (string cond1 in conArray)
        {
            if (cond1.IndexOf("-") != -1)
            {
                string[] ary2 = cond1.Split('-');
                string start = ary2[0];
                string end = ary2[1];
                if (Regex.IsMatch(start, "^0"))
                {
                    zero_factor = "0";
                    if (Regex.IsMatch(start, "^00"))
                    {
                        zero_factor = "00";
                    }
                    start = Regex.Replace(start, "^0+", "");
                    end = Regex.Replace(end, "^0+", "");
                }
                for (int i = Convert.ToInt32(start); i <= Convert.ToInt32(end); i++)
                {
                    string finalstring = zero_factor + i.ToString();
                    if (!NonRtBin.ContainsKey(finalstring))
                    {
                        NonRtBin[finalstring] = 0;
                    }
                }
            }
            else
            {
                if (!NonRtBin.ContainsKey(cond1))
                {
                    NonRtBin[cond1] = 0;
                }
            }
        }
    }

    /// <summary>
    /// Check the bin record base on the limit record with non-retest softbin
    /// </summary>
    /// <param name="limit_array"></param>
    /// <param name="sum_array"></param>
    /// <returns></returns>
    private int LimitParse(DataRow limit_array, DataRow sum_array)
    {
        int total_fail = 0;
        float ActYield = 0;

        int total_fail2 = 0;
        float ActYield2 = 0;

        float rtnValue1 = 0;
        float rtnValue2 = 0;

        bool Result1 = true;
        bool Result2 = true;
        bool Result = true;

        int Idx2ndCond = 0;

        if (limit_array[5].ToString().CompareTo("") != 0)
        {
            Idx2ndCond = 1;
        }
        string[] BinArray = limit_array[0].ToString().Split('+');

        foreach (string bin in BinArray)
        {

            if (bin.Substring(0, 1) == "P")
            {
                total_fail += PassQty;
            }

            if (bin.Substring(0, 1) == "B")
            {
                if (string.IsNullOrEmpty(sum_array[BinIdx + System.Convert.ToInt32(bin.Substring(1))].ToString()) == false)
                {
                    total_fail += Convert.ToInt32(sum_array[BinIdx + System.Convert.ToInt32(bin.Substring(1))].ToString());
                }
            }

            if (bin.Substring(0, 1) == "F")
            {
                if (NonRtBinDict.ContainsKey(bin.Substring(1)))
                {
                    total_fail += Convert.ToInt32(NonRtBinDict[bin.Substring(1)][0]);
                }
            }
        }

        ActYield = (float)total_fail / TotalQty * 100;

        if (Idx2ndCond == 1)
        {
            string[] BinArray2 = limit_array[5].ToString().Split('+');

            foreach (string bin in BinArray2)
            {

                if (bin.Substring(0, 1) == "P")
                {
                    total_fail2 += PassQty;
                }

                if (bin.Substring(0, 1) == "B")
                {
                    if (string.IsNullOrEmpty(sum_array[BinIdx + System.Convert.ToInt32(bin.Substring(1))].ToString()) == false)
                    {
                        total_fail2 += Convert.ToInt32(sum_array[BinIdx + System.Convert.ToInt32(bin.Substring(1))].ToString());
                    }
                }

                if (bin.Substring(0, 1) == "F")
                {
                    if (NonRtBinDict.ContainsKey(bin.Substring(1)))
                    {
                        total_fail2 += Convert.ToInt32(NonRtBinDict[bin.Substring(1)][0]);
                    }
                }
            }
            ActYield2 = (float)total_fail2 / TotalQty * 100;
        }

        switch (limit_array[3].ToString())
        {
            case "pcs":
                switch (limit_array[2].ToString())
                {
                    case ">":
                        if (total_fail > System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "=":
                        if (total_fail == System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "<":
                        if (total_fail < System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                }
                rtnValue1 = total_fail;
                break;
            case "%":
                switch (limit_array[2].ToString())
                {
                    case ">":
                        if (ActYield > System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "=":
                        if (ActYield == System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "<":
                        if (ActYield < System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                }
                rtnValue1 = ActYield;
                break;

        }
        if (Idx2ndCond == 1)
        {
            switch (limit_array[7].ToString())
            {
                case "pcs":
                    switch (limit_array[6].ToString())
                    {
                        case ">":
                            if (total_fail2 > System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "=":
                            if (total_fail2 == System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "<":
                            if (total_fail2 < System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                    }
                    rtnValue2 = total_fail2;
                    break;
                case "%":
                    switch (limit_array[6].ToString())
                    {
                        case ">":
                            if (ActYield2 > System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "=":
                            if (ActYield2 == System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "<":
                            if (ActYield2 < System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                    }
                    rtnValue2 = ActYield2;
                    break;
            }
        }

        if (Idx2ndCond == 1)
        {
            Result = Result1 && Result2;
            if (Result == true)
            {
                return System.Convert.ToInt32(limit_array[10]);
            }
            else
            {
                return -1;
            }
        }
        else
        {
            if (Result1 == true)
            {
                return System.Convert.ToInt32(limit_array[10]);
            }
            else
            {
                return -1;
            }
        }
    }

    /// <summary>
    /// Check the bin record base on the limit record with non-retest hardbin
    /// </summary>
    /// <param name="limit_array"></param>
    /// <param name="sum_array"></param>
    /// <returns></returns>
    private int LimitParse2(DataRow limit_array, DataRow sum_array)
    {
        int total_fail = 0;
        float ActYield = 0;

        int total_fail2 = 0;
        float ActYield2 = 0;

        float rtnValue1 = 0;
        float rtnValue2 = 0;

        bool Result1 = true;
        bool Result2 = true;
        bool Result = true;

        int Idx2ndCond = 0;

        if (limit_array[5].ToString().CompareTo("") != 0)
        {
            Idx2ndCond = 1;
        }
        string[] BinArray = limit_array[0].ToString().Split('+');

        foreach (string bin in BinArray)
        {

            if (bin.Substring(0, 1) == "P")
            {
                total_fail += PassQty;
            }

            if (bin.Substring(0, 1) == "B")
            {
                if (NonRtBinDict.ContainsKey(bin.Substring(1)))
                {
                    total_fail += Convert.ToInt32(NonRtBinDict[bin.Substring(1)][0]);
                }
            }

            if (bin.Substring(0, 1) == "F")
            {
                for (int i = 0; i <= 20; i++)
                {
                    if (string.IsNullOrEmpty(sum_array[i].ToString()) == false)
                    {
                        if (bin.Substring(1).CompareTo(sum_array[i].ToString().Split(';')[0]) == 0)
                        {
                            total_fail += System.Convert.ToInt32(sum_array[i].ToString().Split(';')[1]);
                        }
                    }
                }
            }
        }

        ActYield = (float)total_fail / TotalQty * 100;

        if (Idx2ndCond == 1)
        {
            string[] BinArray2 = limit_array[5].ToString().Split('+');

            foreach (string bin in BinArray2)
            {

                if (bin.Substring(0, 1) == "P")
                {
                    total_fail2 += PassQty;
                }

                if (bin.Substring(0, 1) == "B")
                {
                    if (NonRtBinDict.ContainsKey(bin.Substring(1)))
                    {
                        total_fail2 += Convert.ToInt32(NonRtBinDict[bin.Substring(1)][0]);
                    }
                }

                if (bin.Substring(0, 1) == "F")
                {
                    for (int i = 0; i <= 20; i++)
                    {
                        if (string.IsNullOrEmpty(sum_array[i].ToString()) == false)
                        {
                            if (bin.Substring(1).CompareTo(sum_array[i].ToString().Split(';')[0]) == 0)
                            {
                                total_fail2 += System.Convert.ToInt32(sum_array[i].ToString().Split(';')[1]);
                            }
                        }
                    }
                }
            }
            ActYield2 = (float)total_fail2 / TotalQty * 100;
        }

        switch (limit_array[3].ToString())
        {
            case "pcs":
                switch (limit_array[2].ToString())
                {
                    case ">":
                        if (total_fail > System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "=":
                        if (total_fail == System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "<":
                        if (total_fail < System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                }
                rtnValue1 = total_fail;
                break;
            case "%":
                switch (limit_array[2].ToString())
                {
                    case ">":
                        if (ActYield > System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "=":
                        if (ActYield == System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "<":
                        if (ActYield < System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                }
                rtnValue1 = ActYield;
                break;

        }
        if (Idx2ndCond == 1)
        {
            switch (limit_array[7].ToString())
            {
                case "pcs":
                    switch (limit_array[6].ToString())
                    {
                        case ">":
                            if (total_fail2 > System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "=":
                            if (total_fail2 == System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "<":
                            if (total_fail2 < System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                    }
                    rtnValue2 = total_fail2;
                    break;
                case "%":
                    switch (limit_array[6].ToString())
                    {
                        case ">":
                            if (ActYield2 > System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "=":
                            if (ActYield2 == System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "<":
                            if (ActYield2 < System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                    }
                    rtnValue2 = ActYield2;
                    break;
            }
        }

        if (Idx2ndCond == 1)
        {
            Result = Result1 && Result2;
            if (Result == true)
            {
                return System.Convert.ToInt32(limit_array[10]);
            }
            else
            {
                return -1;
            }
        }
        else
        {
            if (Result1 == true)
            {
                return System.Convert.ToInt32(limit_array[10]);
            }
            else
            {
                return -1;
            }
        }
    }

    private int LimitParse3(DataRow limit_array, DataRow sum_array)
    {
        int total_fail = 0;
        float ActYield = 0;

        int total_fail2 = 0;
        float ActYield2 = 0;

        float rtnValue1 = 0;
        float rtnValue2 = 0;

        bool Result1 = true;
        bool Result2 = true;
        bool Result = true;

        int Idx2ndCond = 0;

        if (limit_array[5].ToString().CompareTo("") != 0)
        {
            Idx2ndCond = 1;
        }
        string[] BinArray = limit_array[0].ToString().Split('+');

        foreach (string bin in BinArray)
        {

            if (bin.Substring(0, 1) == "P")
            {
                total_fail += PassQty;
            }

            if (bin.Substring(0, 1) == "B")
            {
                if (string.IsNullOrEmpty(sum_array[BinIdx + System.Convert.ToInt32(bin.Substring(1))].ToString()) == false)
                {
                    total_fail += Convert.ToInt32(sum_array[BinIdx + System.Convert.ToInt32(bin.Substring(1))].ToString());
                }
            }

            if (bin.Substring(0, 1) == "F")
            {
                for (int i = 0; i <= 20; i++)
                {
                    if (string.IsNullOrEmpty(sum_array[i].ToString()) == false)
                    {
                        if (bin.Substring(1).CompareTo(sum_array[i].ToString().Split(';')[0]) == 0)
                        {
                            total_fail += System.Convert.ToInt32(sum_array[i].ToString().Split(';')[1]);
                        }
                    }
                }
            }
        }

        ActYield = (float)total_fail / TotalQty * 100;

        if (Idx2ndCond == 1)
        {
            string[] BinArray2 = limit_array[5].ToString().Split('+');

            foreach (string bin in BinArray2)
            {

                if (bin.Substring(0, 1) == "P")
                {
                    total_fail2 += PassQty;
                }

                if (bin.Substring(0, 1) == "B")
                {
                    if (string.IsNullOrEmpty(sum_array[BinIdx + System.Convert.ToInt32(bin.Substring(1))].ToString()) == false)
                    {
                        total_fail2 += Convert.ToInt32(sum_array[BinIdx + System.Convert.ToInt32(bin.Substring(1))].ToString());
                    }
                }

                if (bin.Substring(0, 1) == "F")
                {
                    for (int i = 0; i <= 20; i++)
                    {
                        if (string.IsNullOrEmpty(sum_array[i].ToString()) == false)
                        {
                            if (bin.Substring(1).CompareTo(sum_array[i].ToString().Split(';')[0]) == 0)
                            {
                                total_fail2 += System.Convert.ToInt32(sum_array[i].ToString().Split(';')[1]);
                            }
                        }
                    }
                }
            }
            ActYield2 = (float)total_fail2 / TotalQty * 100;
        }

        switch (limit_array[3].ToString())
        {
            case "pcs":
                switch (limit_array[2].ToString())
                {
                    case ">":
                        if (total_fail > System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "=":
                        if (total_fail == System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "<":
                        if (total_fail < System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                }
                rtnValue1 = total_fail;
                break;
            case "%":
                switch (limit_array[2].ToString())
                {
                    case ">":
                        if (ActYield > System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "=":
                        if (ActYield == System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                    case "<":
                        if (ActYield < System.Convert.ToDouble(limit_array[4]))
                        {
                            Result1 = true;
                        }
                        else
                        {
                            Result1 = false;
                        }
                        break;
                }
                rtnValue1 = ActYield;
                break;

        }
        if (Idx2ndCond == 1)
        {
            switch (limit_array[7].ToString())
            {
                case "pcs":
                    switch (limit_array[6].ToString())
                    {
                        case ">":
                            if (total_fail2 > System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "=":
                            if (total_fail2 == System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "<":
                            if (total_fail2 < System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                    }
                    rtnValue2 = total_fail2;
                    break;
                case "%":
                    switch (limit_array[6].ToString())
                    {
                        case ">":
                            if (ActYield2 > System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "=":
                            if (ActYield2 == System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                        case "<":
                            if (ActYield2 < System.Convert.ToDouble(limit_array[8]))
                            {
                                Result2 = true;
                            }
                            else
                            {
                                Result2 = false;
                            }
                            break;
                    }
                    rtnValue2 = ActYield2;
                    break;
            }
        }

        if (Idx2ndCond == 1)
        {
            Result = Result1 && Result2;
            if (Result == true)
            {
                return System.Convert.ToInt32(limit_array[10]);
            }
            else
            {
                return -1;
            }
        }
        else
        {
            if (Result1 == true)
            {
                return System.Convert.ToInt32(limit_array[10]);
            }
            else
            {
                return -1;
            }
        }
    }

    /// <summary>
    /// Execute Bin SPC script
    /// </summary>
    /// <param name="SPCpara"></param>
    /// <returns></returns>
    private string RunSpcCheck(string SPCpara)
    {
        try
        {
            string output = "";
            SshExec exec = new SshExec("165.114.74.41", "idsdb");
            exec.Password = "dp02apr";
            exec.Connect();
            while (true)
            {
                string command = "/DP_disk/scripts/dira/SPC/brat_bin_V1.pl \"" + SPCpara + "\"";
                output = exec.RunCommand(command);
                break;
            }
            exec.Close();
            return output;
        }
        catch (Exception e)
        {
            throw (e);
            return "Error";
        }
    }

    /// <summary>
    /// Execute R2R check script
    /// </summary>
    /// <param name="batch"></param>
    /// <param name="stage"></param>
    /// <param name="start_date"></param>
    /// <returns></returns>
    public string RunR2RCheck(string batch, string stage, string start_date)
    {
        try
        {
            string output = "";
            SshExec exec = new SshExec("165.114.74.41", "idsdb");
            exec.Password = "dp02apr";
            exec.Connect();
            while (true)
            {
                string command = "/home/idsdb/scripts/handlerHoldv2.pl " + batch + " " + stage + " " + start_date + "";
                output = exec.RunCommand(command);
                break;
            }
            exec.Close();
            return output;
        }
        catch (Exception e)
        {
            throw (e);
            return "Error";
        }
    }

    /// <summary>
    /// Execute AutoHold script
    /// </summary>
    /// <param name="batch"></param>
    /// <param name="hcode"></param>
    /// <param name="comment"></param>
    /// <returns></returns>
    private string AutoHold(string batch, string hcode, string comment)
    {
        try
        {
            string output = "";
            SshExec exec = new SshExec("165.114.74.41", "idsdb");
            exec.Password = "dp02apr";
            exec.Connect();
            while (true)
            {
                string command = "/var/www/cgi-bin/BratFinal/AutoHoldRelease.pl -b " + batch + " -o HOLD -h " + hcode + " -c FT 'Brat: " + comment + "'";
                output = exec.RunCommand(command);
                break;
            }
            exec.Close();
            return output;
        }
        catch (Exception e)
        {
            throw (e);
            return "Error";
        }
    }

    /// <summary>
    /// Remove duplicate element in array
    /// </summary>
    /// <param name="stringlist"></param>
    /// <returns></returns>
    public string RemoveDuplicates(StringBuilder stringlist)
    {
        string newstring = "";
        string[] checkary = stringlist.ToString().Split(';');
        System.Collections.ArrayList newList = new System.Collections.ArrayList();
        foreach (string str in checkary)
        {
            if (!newList.Contains(str))
                newList.Add(str);
        }

        string[] myStringArray = (string[])newList.ToArray(typeof(string));
        newstring = string.Join(";", myStringArray);
        return newstring;
    }
}

